#!/usr/bin/env node

// monorepo utility script to type-check staged changes to typescript files
// by running tsc within each individual package/workspace, scoped to only the
// changed files from that package/workspace
//
// NB this does not provide a definitive typecheck (a la `npm run typecheck`) -
// our changes may break type validity in unchanged files that include our changes
//
// (for now) we use this partial check in our precommit hook as a tradeoff
// to catch any type errors in changed files themselves without having to wait for
// a comprehensive typecheck on each commit

// excluded in .gitignore
const tsconfigTemp = ".tsconfig-lint.json";

const { execSync } = require("child_process");
const fs = require("fs");
const path = require("path");

if (process.cwd() == path.resolve(__dirname, "..")) {
  // running in root - fan out to workspaces
  let cmd = `npm exec --workspaces -c '${__filename} '${process.argv
    .splice(2)
    .map((file) => "\"'\"'" + file + "'\"'\"'")
    .join(" '")}'`;

  try {
    let result = execSync(cmd).toString().trim();
    if (result) console.log(result);
  } catch (e) {
    let result = e.stdout.toString().trim();
    if (result) console.log(result);
    result = e.stderr.toString().trim();
    if (result) console.log(result);
    process.exit(e.status);
  }

  process.exit(0);
} else {
  // running in workspace/package
  console.log(
    "Typecheck for changes in: " +
      process.cwd().replace(path.resolve(__dirname, "..") + "/", "")
  );
  const filteredFiles = process.argv
    .slice(2)
    .filter((file) => file.indexOf(process.cwd() + "/") == 0);

  if (!filteredFiles.length) {
    console.log("..no typescript changes in this package");
    process.exit(0);
  }

  try {
    fs.writeFileSync(
      tsconfigTemp,
      `{
      // this file is auto-generated by tsc-lint-staged while linting staged changes
      // and should be ignored by .gitignore
      "extends": "./tsconfig.json",
      "include": [
        "next-env.d.ts",
        "` +
        filteredFiles.join('", "') +
        `"
      ],
      // empty references to suppress error when no files matched (e.g. only tests updated)
      // - see https://github.com/Microsoft/TypeScript/issues/12762
      "references": []
    }`
    );

    let result = execSync("tsc --pretty --noEmit --project " + tsconfigTemp)
      .toString()
      .trim();
    if (result) console.log(result);
    console.log("..typecheck succeeded");
  } catch (e) {
    let result = e.stdout.toString().trim();
    if (result) console.log(result);
    result = e.stderr.toString().trim();
    if (result) console.log(result);
    process.exit(e.status);
  }

  process.exit(0);
}
